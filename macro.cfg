[gcode_macro START_PRINT]
gcode:
    status_heating
    CLEAR_PAUSE
    {% set BED_TEMP = params.BED_TEMP|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}
    {% set chambertemp = params.CHAMBER|default(30)|int %}
    M220 S100 ; reset feedrate
    M221 S100 ;reset extrusion rate
    RESPOND MSG="Bed heating"
    M190 S{BED_TEMP}
    SET_FAN_SPEED FAN=Filter SPEED=1
    RESPOND MSG="Chamber heating"
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}
    SET_FAN_SPEED FAN=Filter SPEED=0.7
    M106 S0
    RESPOND MSG="Homing"
    G21 
    M82 
    G90
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}
    G29
    G0 Z70 F1000
    Smart_Park
    M190 S{BED_TEMP}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.BED_TEMP|default(60)|float - 5} MAXIMUM={params.BED_TEMP|default(60)|float + 5}
    M109 S{EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(200)|float - 5} MAXIMUM={params.EXTRUDER_TEMP|default(200)|float + 5}
    RESPOND MSG="Purging"
    VORON_PURGE 
    M220 S100 ; reset feedrate
    M221 S100 ;reset extrusion rate
    status_printing
    RESPOND MSG="Start printing!"

[gcode_macro G29]
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  RESPOND MSG="Bed mesh calibrate"
  status_meshing
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE PROFILE=default 


[gcode_macro LOAD_FILAMENT]
variable_load_distance:  150
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(100) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  200
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(100) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state    
    
[gcode_macro END_PRINT]
gcode:
    status_ready
    TURN_OFF_HEATERS
    M107
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-5 Y-5 Z15 E-5 F5000
    # Raise nozzle by 10mm
    G90
    G0 Y200
    M84
    M106 S0
    SET_SKEW CLEAR=1
    status_stand
    SET_FAN_SPEED FAN=Filter SPEED=0
    RESPOND MSG="printing done!"
    




[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    status_ready
    TURN_OFF_HEATERS
    M107
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-5 Y-5 Z15 E-5 F5000
    # Raise nozzle by 10mm
    G90
    G0 Y200
    M106 S0
    SET_SKEW CLEAR=1
    status_stand
    RESPOND MSG="printing cancel"


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro M600]
gcode:
  PAUSE


[gcode_macro PID_HOTEND]
gcode:
  {% if 'T' in params %}
  PID_CALIBRATE HEATER=extruder TARGET={ params.T|float}
  {% endif %}

[gcode_macro PID_BED]
gcode:
  {% if 'T' in params %}
  PID_CALIBRATE HEATER=heater_bed TARGET={ params.T|float}
  {% endif %}


[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg



